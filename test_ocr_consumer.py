from flask import Flask, request, jsonify
import base64
import threading
import time
import sys
import os

# Mock OCR endpoint for testing
app = Flask(__name__)

@app.route('/ocr', methods=['POST'])
def mock_ocr():
    """
    Mock OCR endpoint that returns sample markdown
    """
    try:
        data = request.get_json()
        image_data = data.get('image', '')
        filename = data.get('filename', 'unknown.png')
        
        # Simulate OCR processing time
        time.sleep(2)
        
        # Return mock markdown content
        markdown_content = f"""# OCR Result for {filename}

## Document Analysis

This is a **mock OCR result** for testing purposes.

### Detected Text:
- Sample text line 1
- Sample text line 2
- Sample text line 3

### Tables:
| Column 1 | Column 2 | Column 3 |
|----------|----------|----------|
| Data 1   | Data 2   | Data 3   |
| Data 4   | Data 5   | Data 6   |

### Equations:
$$E = mc^2$$

### Summary:
- Image size: {len(image_data)} characters (base64)
- Processing time: ~2 seconds
- Status: ✅ Complete

---
*Generated by Mock OCR Service*
"""
        
        # Also provide raw text version
        raw_text = f"""OCR Result for {filename}

Document Analysis

This is a mock OCR result for testing purposes.

Detected Text:
- Sample text line 1
- Sample text line 2
- Sample text line 3

Tables:
Column 1 Column 2 Column 3
Data 1 Data 2 Data 3
Data 4 Data 5 Data 6

Equations:
E = mc^2

Summary:
- Image size: {len(image_data)} characters (base64)
- Processing time: ~2 seconds
- Status: Complete

Generated by Mock OCR Service"""

        return jsonify({
            'markdown': markdown_content,
            'text': raw_text,
            'raw_text': raw_text,
            'status': 'success',
            'filename': filename
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

def run_mock_server():
    """Run the mock OCR server"""
    print("🚀 Starting mock OCR server on http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=False)

def test_consumer():
    """Test the consumer with mock endpoint"""
    print("🧪 Testing OCR Consumer with mock endpoint...")
    
    # Import and run consumer with mock endpoint
    from ocr_consumer import OCRConsumer
    
    consumer = OCRConsumer('http://localhost:5000/ocr')
    
    print("📡 Consumer will connect to mock endpoint")
    print("📝 Publish an image using: python quick_publish.py my_image.png")
    print("⏳ Consumer is waiting for messages...")
    
    consumer.start_consuming()

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "server":
        # Run mock server
        run_mock_server()
    else:
        # Start mock server in background thread
        server_thread = threading.Thread(target=run_mock_server, daemon=True)
        server_thread.start()
        
        # Wait for server to start
        time.sleep(2)
        
        # Test consumer
        test_consumer() 